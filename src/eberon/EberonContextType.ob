MODULE EberonContextType;
IMPORT
    Chars,
    Context, ContextHierarchy, ContextProcedure, ContextType, 
    EberonContext, EberonDynamicArray, EberonMap, EberonRecord, EberonTypes,
    Errors, ExpressionTree,
    Object, Procedure, R := Record, ScopeBase, Types;
CONST
    dynamicArrayLength = -1;
TYPE
    Declaration* = RECORD(ContextType.Declaration)
    END;
    PDeclaration = POINTER TO Declaration;

    FormalType* = RECORD(ContextType.HandleSymbolAsType)
        arrayDimensions: ARRAY * OF BOOLEAN;
        dynamicDimension: BOOLEAN;
    END;

    Record* = RECORD(ContextType.Record)
        PROCEDURE Record*(parent: PDeclaration);
    END;

    Array* = RECORD(ContextType.Array)
    END;

    ArrayDimensions* = RECORD(ContextType.ArrayDimensions)
    END;

    MethodHeading* = RECORD(ContextType.DeclarationAndIdentHandle)
        id: EberonContext.PIdentdefInfo;
        type: Procedure.PType;
    END;

    Map* = RECORD(ContextType.DeclarationHandle)
    END;

    MethodDeclMsg = RECORD(ContextHierarchy.Message)
        PROCEDURE MethodDeclMsg(id: Context.PIdentdefInfo; type: Procedure.PType);
        
        id: Context.PIdentdefInfo; 
        type: Procedure.PType;
    END;

PROCEDURE Declaration.handleIdentdef(id: Context.PIdentdefInfo);
BEGIN
    EberonContext.checkOrdinaryExport(id(EberonContext.PIdentdefInfo)^, "type");
    SUPER(id);
END;

PROCEDURE FormalType.setType(type: Types.PStorageType);
BEGIN
    result <- type;
    FOR i <- LEN(SELF.arrayDimensions) - 1 TO 0 BY -1 DO
        IF SELF.arrayDimensions[i] THEN
            result := NEW EberonDynamicArray.DynamicArray(result);
        ELSE
            result := SELF.root().language().types.makeOpenArray(result);
        END;
    END;
    SELF.parent()^(ContextType.HandleSymbolAsType).setType(result);
END;

PROCEDURE FormalType.handleLiteral(s: STRING);
BEGIN
    IF s = "*" THEN
        SELF.dynamicDimension := TRUE;
    ELSIF s = "OF" THEN
        SELF.arrayDimensions.add(SELF.dynamicDimension);
        SELF.dynamicDimension := FALSE;
    END;
END;

PROCEDURE recordTypeFactory(name, cons: STRING; scope: ScopeBase.PType): R.PType;
    RETURN NEW EberonRecord.Record(name, cons, scope);
END;

PROCEDURE Record.Record(parent: PDeclaration)
    | SUPER(parent, recordTypeFactory);
END;

PROCEDURE checkMethodExport(record: Record; method: Context.PIdentdefInfo; hint: STRING);
BEGIN
    IF ~record.declaration.id.exported() & method.exported() THEN
        Errors.raise(hint + " '" + method.id() + "' cannot be exported because record itself is not exported");
    END;
END;

PROCEDURE Record.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
VAR
    result: Object.PType;
BEGIN
    IF msg IS MethodDeclMsg THEN 
        IF SELF.declaration.id = NIL THEN
            Errors.raise("cannot declare methods for anonymous records (POINTER TO RECORD)");
        END;
        methodType <- msg.type;
        boundType <- SELF.type(EberonRecord.PRecord);
        id <- msg.id.id();
        IF boundType.name = id THEN
            checkMethodExport(SELF, msg.id, "constructor");
            boundType.declareConstructor(methodType, msg.id.exported());
        ELSE
            boundType.addMethod(msg.id,
                                NEW EberonTypes.MethodType(id, methodType, Procedure.makeProcCallGenerator));
            checkMethodExport(SELF, msg.id, "method");
        END;
    ELSIF msg IS ContextProcedure.EndParametersMsg THEN (* not used *)
    ELSIF msg IS ContextProcedure.AddArgumentMsg THEN   (* not used *)
    ELSE
        result := SUPER(msg);
    END;
    RETURN result;
END;

PROCEDURE Record.doMakeField(field: Context.PIdentdefInfo; type: Types.PStorageType): Types.PField;
BEGIN
    RETURN NEW EberonRecord.Field(field, type, SELF.type(EberonRecord.PRecord));
END;

PROCEDURE Record.doGenerateBaseConstructorCallCode(): STRING;
VAR
    result: STRING;
BEGIN
    base <- SELF.type.base;
    IF base # NIL THEN
        baseConstructor <- EberonRecord.constructor(base^(EberonRecord.Record));
        IF (baseConstructor = NIL) OR (LEN(baseConstructor.args()) = 0) THEN
            result := SUPER();
        ELSE        
            result := SELF.qualifiedBaseConstructor() + ".apply(this, arguments);" + Chars.ln;
        END;
    END;
    RETURN result;
END;

PROCEDURE Record.endParse(): BOOLEAN;
BEGIN
    result <- TRUE;

    type <- SELF.type(EberonRecord.PRecord);
    IF type.customConstructor = NIL THEN
        result := SUPER();
    ELSE
        SELF.codeGenerator().write(SELF.generateInheritance());
        type.setRecordInitializationCode(
            SELF.doGenerateBaseConstructorCallCode());
    END;

    RETURN result;
END;

PROCEDURE Array.doMakeInit(type: Types.PStorageType; dimensions: STRING; length: INTEGER): STRING;
VAR
    result: STRING;
BEGIN
    IF length = dynamicArrayLength THEN
        result := "[]";
    ELSIF (type IS EberonRecord.PRecord) & (EberonRecord.hasParameterizedConstructor(type^)) THEN
        Errors.raise("cannot use '" + type.description() + "' as an element of static array because it has constructor with parameters");
    ELSE
        result := SUPER(type, dimensions, length);
    END;
    RETURN result;
END;

PROCEDURE Array.doMakeType(elementsType: Types.PStorageType; init: STRING; length: INTEGER): Types.PStorageType;
VAR
    result: Types.PStorageType;
BEGIN
    IF length = dynamicArrayLength THEN
        result := NEW EberonDynamicArray.DynamicArray(elementsType);
    ELSE
        result := SUPER(elementsType, init, length);
    END;
    RETURN result;
END;

PROCEDURE ArrayDimensions.handleLiteral(s: STRING);
BEGIN
    IF s = "*" THEN
        SELF.doAddDimension(dynamicArrayLength);
    ELSE
        SUPER(s);
    END;
END;

PROCEDURE MethodHeading.handleIdentdef(id: Context.PIdentdefInfo);
BEGIN
    SELF.id := id(EberonContext.PIdentdefInfo);
    EberonContext.checkOrdinaryExport(SELF.id^, "method");
END;

PROCEDURE MethodHeading.typeName(): STRING;
    RETURN "";
END;

PROCEDURE MethodHeading.setType(type: Types.PStorageType);
BEGIN
    SELF.type := type(Procedure.PType);
END;

PROCEDURE MethodHeading.endParse(): BOOLEAN;
BEGIN
    void <- SELF.handleMessage(NEW MethodDeclMsg(SELF.id, SELF.type)^);
    RETURN TRUE;
END;

PROCEDURE Map.handleQIdent(q: ContextHierarchy.QIdent);
BEGIN
    s <- ContextHierarchy.getQIdSymbolAndScope(SELF.root()^, q);
    type <- ExpressionTree.unwrapType(s.symbol().info());
    SELF.setType(type);
END;

PROCEDURE Map.setType(type: Types.PStorageType);
BEGIN
    SELF.parent()^(ContextType.HandleSymbolAsType).setType(NEW EberonMap.Type(type));
END;

(* anonymous types can be used in map declaration *)
PROCEDURE Map.isAnonymousDeclaration(): BOOLEAN;
    RETURN TRUE;
END;

PROCEDURE Map.typeName(): STRING;
    RETURN "";
END;

PROCEDURE MethodDeclMsg.MethodDeclMsg(id: Context.PIdentdefInfo; type: Procedure.PType)
    | id(id),
      type(type);
END;

PROCEDURE isTypeRecursive*(type, base: Types.PType): BOOLEAN;
BEGIN
    result <- ~(type IS EberonDynamicArray.PDynamicArray) 
            & ~(type IS EberonMap.PType);
    IF result THEN
        result := ContextType.isTypeRecursive(type, base);
    END;
    RETURN result;
END;

END EberonContextType.